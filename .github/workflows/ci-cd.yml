name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_APP_ENV: production

      - name: Check if build was successful
        id: check-build
        run: |
          if [ -d ".next" ]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build directory .next exists"
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Build directory .next not found"
            exit 1
          fi

      - name: Upload build artifacts
        if: steps.check-build.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 1

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Try to download build artifacts
        id: download-artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Check artifact download result
        id: check-artifacts
        run: |
          if [ "${{ steps.download-artifacts.outcome }}" == "success" ] && [ -d ".next" ]; then
            echo "artifacts_available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Build artifacts downloaded successfully"
          else
            echo "artifacts_available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Build artifacts not available, will rebuild"
          fi

      - name: Rebuild if artifacts not available
        if: steps.check-artifacts.outputs.artifacts_available == 'false'
        run: |
          echo "üîÑ Rebuilding application..."
          npm run build
        env:
          NEXT_PUBLIC_APP_ENV: production

      - name: Debug environment info
        run: |
          echo "üîç Environment Debug Information:"
          echo "Working directory: $(pwd)"
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Build artifacts status: ${{ steps.check-artifacts.outputs.artifacts_available }}"
          echo "Contents of current directory:"
          ls -la
          if [ -d ".next" ]; then
            echo "Contents of .next directory:"
            ls -la .next/ || echo "Cannot read .next directory"
          fi

      - name: Check if Playwright config exists
        id: check-playwright
        run: |
          if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
            echo "has_playwright=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Playwright config found"
          else
            echo "has_playwright=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è Playwright config not found"
          fi

      - name: Install Playwright browsers
        if: steps.check-playwright.outputs.has_playwright == 'true'
        run: npx playwright install --with-deps

      - name: Run E2E tests
        if: steps.check-playwright.outputs.has_playwright == 'true'
        run: npm run test:e2e

      - name: Skip E2E tests
        if: steps.check-playwright.outputs.has_playwright == 'false'
        run: echo "Playwright not configured, skipping E2E tests"

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure() && steps.check-playwright.outputs.has_playwright == 'true'
        with:
          name: playwright-report
          path: playwright-report/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        # Add your deployment script here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: echo "Deploy to production environment"
        # Add your deployment script here
